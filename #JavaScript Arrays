# JavaScript Arrays

- The array si the most commonly used data structure

```javascript
let array = [1,2,3,4];
```

- For any data structure, primarily concerned with access, insertion, deletion & search

## Insertion - Array Fundamentals #1 

Adding a new element to the data structure

-**.push**
- the push method adds a new element to the end of the array

```javascript
let arr = [1,2,3,4,5];
arr.push(6);
arr.psuh(7);
console.log(arr); // [1,2,3,4,5,6,7]
```
## Deletion - Array Fundamentals #2

deletion using the pop method 

-**.pop**
- the pop method removes the last added element 
- the pop method also returns the added element
- time complexity is O(1)

```javascript
let arr = [1,2,3,4];
arr.pop(); //returns 4, arr = [1,2,3];
arr.pop(); //returns 43 arr = [1,2];
```

-**.shift()**
- remove the first element & return it


```javascript
let arr = [1,2,3,4];
arr.shift(); //returns 1, arr = [2,3,4];
arr.shift(); //returns 2, arr = [3,4];
```

## Access - Array Fundamentals #3

Accessing an array at a specific index onnly takes O(1)

- this is becuase it is directly accessing the element directly from the address in memory
- it does so by specifying the index
- JavaScript is 0 indexed

```javascript
let arr = [1,2,3,4,5];
arr[0]; // returns 1
```

## Iteration - Array Fundamentals #4

- Iteration is the process of accessing each of the items comntained within a data structure
- they all have a time complexity of O(n)

-**for (variables, condition, modification)**

- for is the most common iteration

```javascript
for (let i = 0; i<array.length; i++) {
    console.log(array[i]);
}
```

- the above ^ means initialize the variable i
- check weather the condition is false by checking if i < array.length
- then modify i by 1 (i++) until the condition results in false

```javascript
let fruits = ["apple", "banana", "cherry", "date"];
let index = 0;

while (index < fruits.length) {
    console.log(fruits[index]);
    index++;
}
```


-**infinite loop**

```javascript
while(true) {
    if (breakCondition) {
        break;
    }
}
```

- similarly a for loop, can infinitely repeat by not setting a conditon

```javascript
for( ; ; ) {
    if (breakCondition) {
        break;
    }
}
```
-**for in**

- another way to iterate in javascript is to call the indeces one by one
- the variable specified before the in is the index of the array as follows

```javascript
var array1 = ['mtb', 'bmx', 'gravel', 'road'];

for (let index in array1) {
    console.log(array1[index]);
} // 'mtb', 'bmx', 'gravel', 'road'

for (let index in array1) {
    console.log(index);
} // '0', '1', '2', '3'
```

-**for of**

- the variable spcified before of, is the element (the value) of the array

```javascript
var array1 = ['mtb', 'bmx', 'gravel', 'road'];

for (let element of array1) {
    console.log(element);
} // 'mtb', 'bmx', 'gravel', 'road'
```

-**forEach**

- executes provided function once for each element in an array
- cannot break out of a loop, more expressive & explicit

```javascript
var array1 = ['mtb', 'bmx', 'gravel', 'road'];

array1.forEach(function(element,index) {
    console.log(element);
}); // 'mtb', 'bmx', 'gravel', 'road'

array1.forEach(function(element,index) {
    console.log(array1[index]);
}); // 'mtb', 'bmx', 'gravel', 'road'
```

## Helper Functions

- commonly used helper functions

### slice(begin, end)

- this helper function returns a portion of an exisiting array **w/o modifying** the exisiting array
- slice(beginning index, ending index)

```javascript
var array1 = [1,2,3,4];
array1.slice(1,2); //returns [2], array1 = [1,2,3,4];
array1.slice(2,4); //returns [3,4], array1 = [1,2,3,4];
```

- if only the beginning index is passed, the ending will assumed to be the max. index of the array

```javascript
var array1 = [1,2,3,4];
array1.slice(1); //returns [2, 3, 4], array1 = [1,2,3,4];
array1.slice(1,4); //returns [2, 3,4], array1 = [1,2,3,4];
```

- if nothing is passed this function simply returns a copy of the array
- array1.slice() === array1 evaluates to false
- the memory addresses at which those arrays reside are different

**arrays in javascript are reference based**

- if you assign a new variable to an array, changes to the variable apply to the original array

```javascript
let array1 = [1,2,3,4];
let array2 = array1;

console.log(array1);
console.log(array2);

array2[0] = 5;

console.log(array1); // [5,2,3,4]
console.log(array2); // [5,2,3,4]

//this can be used to create a seperate copy of array1
let array2 = array1.slice(); 
//or using the spread operator
let array2 = [...array1];
//or using Array.from():
let array2 = Array.from(array1);
```

- the book recommends array.from();
- Array.from();  takes O(n), where n is the size of the array, this is intuitive, copying the array takes copying all n elements of the array.

### splice(begin, size, element1, element2...)

- this helper function returns and changes the contents of an array by removing existing elements and/or adding new elements
- .splice(beginningIndex, SizeOfIndex, newElementsToAdd, newElementsToAdd, ... );
- it returns the removed elements

```javascript
let array1 = [1,2,3,4];
array1.splice(); //returns []; array1 = [1,2,3,4];
array1.splice(1,2); //returns [2,3], array1 = [1,4];
```
- this example ^ demonstrates removal. [2,3], was return becuase it selected 2 items starting from an index of 1

```javascript
let array1 = [1,2,3,4];
array1.splice(1,2, [5,6,7]) //returns [2,3], array1 = [1,  [567], 4]
array1.splice(1,2, {'ss': 1}); //returns [2,3], array1 = [1, {'ss':1}, 4]
```

- ^ anything object type can be added to can be added to the array, this is the beauty (and odd part of javascript)
- splice() is, worst case O(n), similarly to copying, if the range specified is the whole array, each n item has to be removed.

## .concat();

- this adds new elements to the array, at the end of the array, and returns THE array

```javascript
var array1 = [1,2,3,4];
array1.concat(); //returns [1,2,3,4], array1 = [1,2,3,4]
array1.concat([2,3,4]); //returns [1,2,3,4, 2, 3, 4], array1 = [1,2,3,4]; 

var result = array1.concat([2, 3, 4]);
console.log(result); // Outputs: [1, 2, 3, 4, 2, 3, 4]
console.log(array1);   // Outputs: [1, 2, 3, 4], showing that array1 is unchanged
```

## .length();

- the length property returns the size of the array
- changing to a lower size can delete elements from the array

```javascript
var array1 = [1,2,3,4];
console.log(array.length) //prints 4
array.length = 3; //array1 = [1,2,3];
```
## Spread Operator (...)


-The spread operator in JavaScript is a powerful feature that allows you to expand elements of an iterable (like an array) 
- into individual elements where multiple arguments (or elements) are expected

```javascript
function addFourNums(a,b,c,d) {
    return a + b + c + d;
}
var numbers = [1,2,3,4];
console.log(addFourNums(...numbers)) //10, because 1 + 2 + 3 + 4 = 10;
```

- To do, map,  filter, reduce


